name: Beta Release

on:
  push:
    tags:
      - "v*.*.*-beta*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag name (e.g., v0.1.0-beta.1)"
        required: false
        type: string
      prerelease:
        description: "Mark release as pre-release"
        required: false
        default: true
        type: boolean

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Linux and Windows here; macOS handled in dedicated jobs below
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install Linux audio build deps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libasound2-dev

      - name: Build release
        run: cargo build --release

      - name: Determine names (Unix)
        if: runner.os != 'Windows'
        id: names_unix
        shell: bash
        run: |
          APP_NAME="vellum-fe"
          case "$RUNNER_ARCH" in
            X64) ARCH="x86_64" ;;
            ARM64) ARCH="aarch64" ;;
            *) ARCH="$RUNNER_ARCH" ;;
          esac
          case "${{ runner.os }}" in
            Linux) OS="linux" ;;
            *) OS="unknown" ;;
          esac
          BIN_PATH="target/release/${APP_NAME}"
          PKG_NAME="${APP_NAME}-${OS}-${ARCH}.zip"
          echo "bin=${BIN_PATH}" >> $GITHUB_OUTPUT
          echo "pkg=${PKG_NAME}" >> $GITHUB_OUTPUT

      - name: Determine names (Windows)
        if: runner.os == 'Windows'
        id: names_win
        shell: pwsh
        run: |
          $APP_NAME = "vellum-fe"
          $OS = "windows"
          switch ($env:RUNNER_ARCH) {
            "X64" { $ARCH = "x86_64" }
            "ARM64" { $ARCH = "arm64" }
            default { $ARCH = $env:RUNNER_ARCH }
          }
          $BIN_PATH = "target/release/${APP_NAME}.exe"
          $PKG_NAME = "${APP_NAME}-${OS}-${ARCH}.zip"
          echo "bin=$BIN_PATH" >> $env:GITHUB_OUTPUT
          echo "pkg=$PKG_NAME" >> $env:GITHUB_OUTPUT

      - name: Package artifact (Unix)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          mkdir -p dist
          BIN_BASENAME="$(basename "${{ steps.names_unix.outputs.bin }}")"
          cp "${{ steps.names_unix.outputs.bin }}" ./dist/
          pushd dist >/dev/null
          chmod +x "$BIN_BASENAME"
          # Strip to reduce size
          strip -s "$BIN_BASENAME" || true
          # Add minimal Linux README
          cat > README-Linux.txt <<'EOF'
          VellumFE (Linux x86_64)
          
          Usage:
            ./vellum-fe --help
          
          Requirements:
            - GLIBC-based distro (Ubuntu 22.04+, Fedora 36+, etc.)
            - ALSA runtime for audio (e.g., libasound2)
            - X11/Wayland clipboard libraries (desktop environments usually include these)
          
          Notes:
            - If you encounter GLIBC version errors on older distros, please open an issue; we can add a more portable build.
            - Ensure your user has access to audio devices (e.g., is in the 'audio' group on some distros).
          EOF
          PKG_TGZ="vellum-fe-linux-x86_64.tar.gz"
          tar -czf "$PKG_TGZ" "$BIN_BASENAME" README-Linux.txt
          rm -f "$BIN_BASENAME" README-Linux.txt
          popd >/dev/null

      - name: Package artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item "${{ steps.names_win.outputs.bin }}" dist/
          Push-Location dist
          Compress-Archive -Path "$(Split-Path -Leaf ${{ steps.names_win.outputs.bin }})" -DestinationPath "${{ steps.names_win.outputs.pkg }}" -Force
          Remove-Item "$(Split-Path -Leaf ${{ steps.names_win.outputs.bin }})"
          Pop-Location

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-archive
          path: |
            dist/*.zip
            dist/*.tar.gz
          if-no-files-found: error

  macos-arm:
    name: Build (macOS arm64)
    runs-on: macos-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build release (aarch64)
        run: cargo build --release

      - name: Package artifact
        shell: bash
        run: |
          mkdir -p dist
          cp target/release/vellum-fe dist/
          pushd dist >/dev/null
          chmod +x vellum-fe
          zip -9 "vellum-fe-macos-arm64.zip" vellum-fe
          rm -f vellum-fe
          popd >/dev/null

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-zip
          path: dist/*.zip
          if-no-files-found: error

  macos-intel:
    name: Build (macOS x86_64)
    runs-on: macos-13
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build release (x86_64)
        run: cargo build --release

      - name: Package artifact
        shell: bash
        run: |
          mkdir -p dist
          cp target/release/vellum-fe dist/
          pushd dist >/dev/null
          chmod +x vellum-fe
          zip -9 "vellum-fe-macos-x64.zip" vellum-fe
          rm -f vellum-fe
          popd >/dev/null

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-x64-zip
          path: dist/*.zip
          if-no-files-found: error

  macos-universal:
    name: Build (macOS universal)
    runs-on: macos-latest
    needs: [macos-arm, macos-intel]
    steps:
      - name: Create workspace
        run: mkdir -p dist

      - name: Download arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-arm64-zip
          path: dist_arm

      - name: Download x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-x64-zip
          path: dist_x64

      - name: Prepare binaries
        shell: bash
        run: |
          set -euxo pipefail
          mkdir work
          unzip -q dist_arm/vellum-fe-macos-arm64.zip -d work/arm
          unzip -q dist_x64/vellum-fe-macos-x64.zip -d work/x64
          lipo -create -output work/vellum-fe-universal work/arm/vellum-fe work/x64/vellum-fe
          chmod +x work/vellum-fe-universal
          pushd work >/dev/null
          zip -9 "../dist/vellum-fe-macos-universal.zip" vellum-fe-universal
          popd >/dev/null

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal-zip
          path: dist/*.zip
          if-no-files-found: error

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, macos-arm, macos-intel, macos-universal]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Show downloaded files
        run: ls -lah dist

      - name: Generate SHA256 checksums
        shell: bash
        run: |
          pushd dist >/dev/null
          shopt -s nullglob
          sha256sum *.zip *.tar.gz | tee SHA256SUMS.txt
          popd >/dev/null

      - name: Create GitHub prerelease and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag || github.ref_name }}
          name: VellumFE ${{ inputs.tag || github.ref_name }}
          body: |
            Automated beta release.

            Built from ${{ github.sha }} on ${{ github.ref }}.
          files: |
            dist/*.zip
            dist/*.tar.gz
            dist/SHA256SUMS.txt
          prerelease: ${{ inputs.prerelease || contains(github.ref_name, '-beta') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
